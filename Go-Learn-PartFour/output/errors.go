package output

import "github.com/fatih/color"

func PrintError(err any) {

	switch t := err.(type) { // Это type switch. Он позволяет определить какого типа данные были переданы и выполнить те действия, которые нужны
	case string:
		color.Red(t)
	case int:
		color.Red("Код ошибки: %d", t)
	case error:
		color.Red(t.Error())
	default:
		color.Red("Неизвестная ошибка")
	}
}

// Это дженерик функция, которая позволяет использовать разные типы данных в функции
// Это удобно, потому что не нужно писать разные функции для разных типов данных, и позволяет делать код чище и использовать принцип DRY
// func sum[T int | float32 | float64 | int16 | int32 | string] (a, b T) T {
// 	return a + b
// }
// Но у дженериков есть недостатки. Например, нельзя использовать для type switch
// Также нельзя возвращать значение, которое не подпадает под дженерик тип. То есть если в union есть тип данных string, то нельзя будет вернуть число
// И еще в дженерик нельзя передать тип данных error, потому что он не является типом данных, а интерфейсом

// Дженерики можно использовать со структурами
// type List[T any] struct {
// 	elements []T
// }

// Дженерики нельяза использовать в методах структур, которые не являются дженериками
// То есть если структура записана с использованием дженерика, то и методы должны быть дженериками
// А если структура записана без дженерика, то и в методе нельзя использовать дженерик
// func (l *List[T]) AddElement() {

// }
