// Главный пакет всегда должен называться main. Это обязательное требование языка Go. Он указывает, что данный файл является исполняемым файлом, а не библиотекой или пакетом.
// Пакет main - это точка входа в программу. Когда запускаешь программу, Go ищет функцию main в пакете main и начинает выполнение с нее.
package main // Пакеты - это своего рода вид модульности в Go, но модулями не являются. Чтобы не  писать все в одном файле можно разбить логику по разным пакетам

// // import "fmt" // FMT - это пакет, который предоставляет функции для форматирования ввода и вывода. Он позволяет выводить текст в консоль и считывать данные с клавиатуры.
import (
	"errors" // Пакет errors предоставляет функции для создания и обработки ошибок. Он позволяет создавать ошибки с помощью функции errors.New и обрабатывать их с помощью функции errors.Is и errors.As.
	"fmt"
	"math"
) // math это еще один встроенный пакет, который дает возможность производить сложные математические манипуляции
// func main() { // Функция main - это точка входа в программу. Когда запускаешь программу, Go ищет функцию main в пакете main и начинает выполнение с нее.
// 	Функция main - это обязательная функция, которая должна быть в каждом исполняемом файле на Go. Она является точкой входа в программу.
// 	fmt.Printf("Hello, World!")
// }

// Модули в Go это приложения, которые состоят из пакетов. То есть пакеты это составная часть модулей.
// Чтобы инициализировать приложение нужно иметь модуль. Просто с пакетом не получится получить бинарник и выпадет ошибка.
// Чтобы инициализировать модуль нужно выполнить команду go mod init <имя_модуля>. Имя модуля должно быть уникальным и не совпадать с другими модулями. Обычно это имя репозитория на GitHub или другом сервисе. Например, github.com/username/repo_name.
// Чтобы собрать приложение нужно выполнить команду go build. После этого приложение скомпилируется и будет готово к запуску.
// После этого создается файл .exe(бинарный), который уже можно запускать где угодно, даже если в системе не установлен Go.

// GO это типизированный язык. Он не даст производить манипуляции с разными типами данных
// func main() {
// 	var userHeight float64 = 1.75
// 	var userWeight float64 = 90
// 	var IMT = userWeight / math.Pow(userHeight, 2)
// 	fmt.Print(IMT)
// }

// Можно определять переменные и без var, а с использованием walrus
// func main() {
// 	userHeight := 1.75 // := это короткая форма объявления переменной. Она позволяет объявить переменную и присвоить ей значение в одной строке. При этом тип переменной определяется автоматически на основе присваиваемого значения.
// 	// Но в таком случае невозможно объявить тип данных для переменной, он будет присвоен автоматически
// 	var userWeight float64
// 	userWeight = 90 // Можно также объявить переменную таким образом, но это не рекомендуется делать, так как это усложняет код и делает его менее читаемым. Лучше использовать короткую форму объявления переменной.
// 	var test1, test2 = 1, 2 Можно объявить несколько переменных в одной строке, но это не рекомендуется делать, так как это усложняет код и делает его менее читаемым. Лучше использовать короткую форму объявления переменной.
// 	IMT := userWeight / math.Pow(userHeight, 2) // := это короткая форма объявления переменной. Она позволяет объявить переменную и присвоить ей значение в одной строке. При этом тип переменной определяется автоматически на основе присваиваемого значения.
// 	fmt.Print(IMT)
// }

// Константы
// func main(){
// 	const IMTPow = 2 // Константы - это неизменяемые значения, которые не могут быть изменены после объявления. Они могут быть объявлены с помощью ключевого слова const. Константы могут быть любого типа данных, включая пользовательские типы.
// 	// Константы могут untyped. Это значит, что значение констант может быть конвертировано в любой тип данных.
// 	userHeight := 1.75
// 	var userWeight float64
// 	userWeight = 90
// 	IMT := userWeight / math.Pow(userHeight, IMTPow)
// 	fmt.Print(IMT)
// }

// Дополню функционал, чтобы получать данные от пользователя
// func main() {
// 	const IMTPow = 2
// 	var userHeight float64
// 	var userWeight float64
// 	fmt.Print("____ Калькулятор индекса массы тела _____\n")
// 	fmt.Print("Введите ваш рост в метрах: ")
// 	fmt.Scan(&userHeight) // Таким образом можно получать данные от пользователя. в аргумент функции Scan записывается указатель на переменную. Я пока их не изучил, но нужно поставить & перед переменной, чтобы получить адрес переменной.
// 	fmt.Print("Введите ваш вес: ")
// 	fmt.Scan(&userWeight)
// 	IMT := userWeight / math.Pow(userHeight, IMTPow)
// 	fmt.Print("Ваш индекс массы тела: ", IMT)
// }

// Форматирование строк
// func main() {
// const IMTPow = 2
// var userHeight float64
// var userWeight float64
// 	fmt.Println("____ Калькулятор индекса массы тела _____") // fmt.Println - это функция, которая выводит текст в консоль и добавляет перевод строки в конце.
// fmt.Print("Введите ваш рост: ")
// fmt.Scan(&userHeight)
// fmt.Print("Введите ваш вес: ")
// fmt.Scan(&userWeight)
//	IMT := userWeight / math.Pow(userHeight/100, IMTPow)
//	fmt.Printf("Ваш индекс массы тела: %v", IMT) // fmt.Printf выводит форматированный текст в консоль. %v - это спецификатор формата, который выводит значение переменной в зависимости от ее типа. Он автоматически определяет тип переменной и выводит его в нужном формате. Например, если переменная типа int, то он выведет ее как целое число, если float64, то выведет с плавающей точкой и т.д.
//                                 %.0f - это спецификатор формата, который выводит значение переменной с плавающей точкой с 0 знаками после запятой. То есть он округляет число до целого.
//	result := fmt.Sprintf("Ваш индекс массы тела: %.2f", IMT) // Sprintf - это функция, которая возвращает форматированную строку, а не выводит ее в консоль. Она позволяет сохранить форматированную строку в переменной и использовать ее позже. Например, можно сохранить ее в переменной и вывести в консоль позже или записать в файл.

// Перезапишу логику вычислений из основной ветки во вспомогательные функции
//	userHeight, userWeight := getUserInput()
//	IMT := calculateIMT(userHeight, userWeight)
//	outputResult(IMT)
//}

// Функции
// Функция для вывода результата
//func outputResult(IMT float64) {
//	result := fmt.Sprintf("Ваш индекс массы тела: %.2f", IMT)
//	fmt.Print(result)
//}

// Функция для возврата значения индекса массы тела
//func calculateIMT(userHeight float64, userWeight float64) float64 {
//	const IMTPow = 2
//	IMT := userWeight / math.Pow(userHeight/100, IMTPow)
//	return IMT
//}

// Функция для получения данных от пользователя и возврата нескольких значений
// В Go в отличие от других языков можно возвращать две переменные
//func getUserInput() (float64, float64) { // Чтобы вернуть несколько значений нужно указать их типы в скобках.
//	var userHeight float64
//	var userWeight float64
//	fmt.Print("Введите ваш рост: ")
//	fmt.Scan(&userHeight)
//	fmt.Print("Введите ваш вес: ")
//	fmt.Scan(&userWeight)
//	return userHeight, userWeight // Чтобы вернуть два значения нужно записать их через запятую
//}

// Условные операторы
// Добавлю условные операторы, чтобы выводить результат в завимисости от индекса массы тела
// func main() {
// 	fmt.Println("____ Калькулятор индекса массы тела _____")
// 	userHeight, userWeight := getUserInput()
// 	IMT := calculateIMT(userHeight, userWeight)

// 	if IMT < 16 {
// 		fmt.Println("У вас сильный дефицит массы тела")
// 	} else if IMT < 18.5 {
// 		fmt.Println("У вас дефицит массы тела")
// 	} else if IMT < 25 {
// 		fmt.Println("У вас нормальная масса тела")
// 	} else if IMT < 30 {
// 		fmt.Println("У вас избыточная масса тела")
// 	} else if IMT < 35 {
// 		fmt.Println("У вас ожирение первой степени")
// 	} else if IMT < 40 {
// 		fmt.Println("У вас ожирение второй степени")
// 	} else if IMT >= 40 {
// 		fmt.Println("У вас ожирение третьей степени")
// 	}
// 	// Можно также переписать это с помощью switch
// 	// switch {
// 	// case IMT < 16:
// 	// 	fmt.Println("У вас сильный дефицит массы тела")
// 	// case IMT < 18.5:
// 	// 	fmt.Println("У вас дефицит массы тела")
// 	// case IMT < 25:
// 	// 	fmt.Println("У вас нормальная масса тела")
// 	// case IMT < 30:
// 	// 	fmt.Println("У вас избыточная масса тела")
// 	// case IMT < 35:
// 	// 	fmt.Println("У вас ожирение первой степени")
// 	// case IMT < 40:
// 	// 	fmt.Println("У вас ожирение второй степени")
// 	// case IMT >= 40:
// 	// 	fmt.Println("У вас ожирение третьей степени")
// 	// }
// 	outputResult(IMT)
// }

// func getUserInput() (float64, float64) {
// 	var userHeight float64
// 	var userWeight float64
// 	fmt.Print("Введите ваш рост: ")
// 	fmt.Scan(&userHeight)
// 	fmt.Print("Введите ваш вес: ")
// 	fmt.Scan(&userWeight)
// 	return userHeight, userWeight
// }

// func calculateIMT(userHeight float64, userWeight float64) float64 {
// 	const IMTPow = 2
// 	IMT := userWeight / math.Pow(userHeight/100, IMTPow)
// 	return IMT
// }

// func outputResult(IMT float64) {
// 	result := fmt.Sprintf(("Ваш индекс массы тела: %.2f"), IMT)
// 	fmt.Print(result)
// }

// Циклы
func main() {
	// for i := 0; i < 10; i++ {
	// 	if i == 5 {
	// 		break
	// 	} else if i == 3 {
	// 		continue
	// 	}
	// 	fmt.Printf("%d\n", i)
	// }
	// Добавлю цикл, чтобы программа работала до тех пор, пока пользователь не захочет выйти
	for {
		fmt.Println("____ Калькулятор индекса массы тела _____")
		userHeight, userWeight := getUserInput()
		IMT, err := calculateIMT(userHeight, userWeight)
		if err != nil {
			panic("Не заданы параметры для расчёта") // panic это специальный метод, который завершает выполнение программы в случае ошибки и выдает код ошибки, а также некоторую отладочную информацию
			// panic стоит использовать только в случае, если ошибка критическая и программа не может продолжать работу.
		}

		outputResult(IMT)

		var answer string
		fmt.Println("Хотите продолжить? (y/n):")
		fmt.Scan(&answer)
		if answer == "n" || answer == "N" {
			break
		} else if answer == "y" || answer == "Y" {
			continue
		} else {
			fmt.Println("Некорректный ввод. Завершение программы.")
			break
		}
	}
}

func getUserInput() (float64, float64) {
	var userHeight float64
	var userWeight float64
	fmt.Print("Введите ваш рост: ")
	fmt.Scan(&userHeight)
	fmt.Print("Введите ваш вес: ")
	fmt.Scan(&userWeight)
	return userHeight, userWeight
}

func calculateIMT(userHeight float64, userWeight float64) (float64, error) {
	// Добавлю блоки для отлова ошибок. В Go в отличие от других языков нет try catch или try except. Ошибка это отдельная переменная, которую нужно возвращать из функций
	if userHeight <= 0 || userWeight <= 0 {
		return 0, errors.New("NO_PARAMS_ERR") // Здесь возвращается два значения, потому что указано, что функция должна вернуть их два.
	}
	const IMTPow = 2
	IMT := userWeight / math.Pow(userHeight/100, IMTPow)
	return IMT, nil // nil - это значение, которое указывает на отсутствие значения. Оно используется для указания на то, что переменная не содержит значения или что функция не вернула ошибку. Аналог null в других языках программирования.
}

func outputResult(IMT float64) {
	result := fmt.Sprintf(("Ваш индекс массы тела: %.2f"), IMT)
	fmt.Print(result)
	if IMT < 16 {
		fmt.Println("У вас сильный дефицит массы тела")
	} else if IMT < 18.5 {
		fmt.Println("У вас дефицит массы тела")
	} else if IMT < 25 {
		fmt.Println("У вас нормальная масса тела")
	} else if IMT < 30 {
		fmt.Println("У вас избыточная масса тела")
	} else if IMT < 35 {
		fmt.Println("У вас ожирение первой степени")
	} else if IMT < 40 {
		fmt.Println("У вас ожирение второй степени")
	} else if IMT >= 40 {
		fmt.Println("У вас ожирение третьей степени")
	}
}
